.5/1.5
??select
??choose
library(help="stats")
sample(1:6)
?sample
sample(1:6, 8)
sample(1:6, 10, replace=TRUE)
sample(c("H", "T"), 10, replace=TRUE)
# DADOS "CARGADOS"
sample(1:6, 30, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
set.seed(200)
sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
set.seed(200)
sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
v <- sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
v <- sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
set.seed(200)
sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
set.seed(200)
sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
set.seed(200)
v <- sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
v
table(b)
table(v)
sum(table(v))
set.seed(200)
v <- sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
table(v)
set.seed(200)
v <- sample(1:6, 60, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
v
table(v)
v <- sample(1:6, 6000, replace=TRUE, prob=c(1/7, 1/7, 2/7, 1/7, 1/7, 1/7))
table(v)
class(table(v))
attr(table(v))
?attr
attributes(table(v))
table(v)
tt <- table(v)
tt
tt[3]
tt[c(2,4)]
sum(tt)
tt
tt*2
tt/2
tt/6000
c(1,2)/7
install.packages("openair")
install.packages("openair")
?TaylorDiagram
library(openair)
?TaylorDiagram
## in the examples below, most effort goes into making some artificial data
## the function itself can be run very simply
## Not run:
## dummy model data for 2003
dat <- selectByDate(mydata, year = 2003)
dat <- data.frame(date = mydata$date, obs = mydata$nox, mod = mydata$nox)
## now make mod worse by adding bias and noise according to the month
## do this for 3 different models
dat <- transform(dat, month = as.numeric(format(date, "%m")))
mod1 <- transform(dat, mod = mod + 10 * month + 10 * month * rnorm(nrow(dat)),
model = "model 1")
## lag the results for mod1 to make the correlation coefficient worse
## without affecting the sd
mod1 <- transform(mod1, mod = c(mod[5:length(mod)], mod[(length(mod) - 3) :
length(mod)]))
## model 2
mod2 <- transform(dat, mod = mod + 7 * month + 7 * month * rnorm(nrow(dat)),
model = "model 2")
## model 3
mod3 <- transform(dat, mod = mod + 3 * month + 3 * month * rnorm(nrow(dat)),
model = "model 3")
mod.dat <- rbind(mod1, mod2, mod3)
## basic Taylor plot
TaylorDiagram(mod.dat, obs = "obs", mod = "mod", group = "model")
TaylorDiagram(mod.dat, obs = "obs", mod = "mod", group = "model", type = "season")
## in the examples below, most effort goes into making some artificial data
## the function itself can be run very simply
## Not run:
## dummy model data for 2003
dat <- selectByDate(mydata, year = 2003)
dat <- data.frame(date = mydata$date, obs = mydata$nox, mod = mydata$nox)
## now make mod worse by adding bias and noise according to the month
## do this for 3 different models
dat <- transform(dat, month = as.numeric(format(date, "%m")))
mod1 <- transform(dat, mod = mod + 10 * month + 10 * month * rnorm(nrow(dat)),
model = "model 1")
## lag the results for mod1 to make the correlation coefficient worse
## without affecting the sd
mod1 <- transform(mod1, mod = c(mod[5:length(mod)], mod[(length(mod) - 3) :
length(mod)]))
## model 2
mod2 <- transform(dat, mod = mod + 7 * month + 7 * month * rnorm(nrow(dat)),
model = "model 2")
## model 3
mod3 <- transform(dat, mod = mod + 3 * month + 3 * month * rnorm(nrow(dat)),
model = "model 3")
mod.dat <- rbind(mod1, mod2, mod3)
## basic Taylor plot
TaylorDiagram(mod.dat, obs = "obs", mod = "mod", group = "model")
?IQR
set.seed(500)
y = seq(1,7,by=2)
y
ee <- 0.10*y + rnorm(4,sd=0.05)
ee
ee0 <- signif(ee, 3)
ee0
plot(ee0)
ee <- mm*y + rnorm(4, sd=ss)
source('E:/LIBROMETRO/Dinamometro.R')
ee
plot(ee)
plot(yy, ee)
plot(y,ee)
plot(y,ee, pch=15, col="black")
plot(y,ee, pch=15, col="black", xlim = c(0,7), ylim = c(0,0.8))
?abline
abline(0,0.1,col="green")
source('E:/LIBROMETRO/Dinamometro.R')
source('E:/LIBROMETRO/Dinamometro.R')
?var
install.packages("MVA")
library(HSAUR2)
library(MVA)
demo("Ch-MVA")
install.packages("mvtnorm")
demo("Ch-MVA")
measure
var(measure[, c("chest","waist","hips")])
cor(measure[, c("chest","waist","hips")])
demo("Ch-MVA")
demo("Ch-MVA")
m1 <- 1:16
dim(m) <- c(4,4)
dim(m1) <- c(4,4)
m1
d1 <- diag(1:4)
d1
d1 %*% m1
m1 %*% d1
x <- cbind(rnorm(10,5,2), rnorm(10,300,100))
x
xm <- apply(x, 2, mean)
xm
S <- cov(x)
S
colnames(x) <- c("x.1", "x.2")
x
xm <- apply(x, 2, mean)
xm
S <- cov(x)
S
sqrt(diag(S))
Si <- solve(S)
Si
?'<<-'
source('E:/RCyRH/Fechas.R')
rdim(1921, 1:12)
expand.grid
?expand.grid
source('E:/RCyRH/Fechas.R')
calendario(2000)
source('E:/RCyRH/Fechas.R')
source('E:/RCyRH/Fechas.R')
calendario(2000)
c1 <- calendario(2000)
c1
for (e in c1) {print(e)}
m <- matrix(nrow=10,ncol=2)
m
m[1:10,] <- c1[1,1:2]
m
c1[1,1:2]
rep(c1[1,1:2],3)
c1[1,1:2]
class(c1[1,1:2])
source('E:/RR/MiBiblioteca.R')
df <- data_frame(
year = c(2010, 2010, 2010, 2010, 2012, 2012, 2012),
qtr = c( 1, 2, 3, 4, 1, 2, 3),
return = rnorm(7)
)
df
df %>% expand(year, qtr)
?expand
df <- data.frame(Month = 1:12, Year = c(2000, rep(NA, 11)))
df
df %>% fill(Year)
df <- data.frame(Month = rep(1:12,2), Year = c(2000, rep(NA, 11), 2001, rep(NA,11)))
df
df %>% fill(Year)
df <- data_frame(
year   = c(2010, 2010, 2010, 2010, 2012, 2012, 2012),
qtr    = c(   1,    2,    3,    4,    1,    2,    3),
return = rnorm(7)
)
df
class(df)
df %>% expand(year, qtr)
df %>% expand(year = 2010:2012, qtr)
df %>% expand(year = full_seq(year, 1), qtr)
source('E:/RCyRH/Fechas.R')
x <- rnorm(40)
x
sort(x)
sample(c(x, rnorm(10,2.20,0.4)))
?sample
x <- sample(c(x, rnorm(10,2.20,0.4)))
hist(x)
hh <- hist(x)
hh
hh$breaks
bb <- hh$breaks[-c(9,10)]
bb
hh <- hist(x, breaks = bb)
lines(density(x))
hh <- hist(x, breaks = bb, freq = F)
lines(density(x))
?density
dd <- density(x)
dd
sqrt(2.25)
v <- c(3,2,-1)
v
c(3,2,-1) -> u
u
assign("w", c(3,2,-1))
w
q <- "k"
assign(q, 5000)
q
k
set.seed(200)
(v<-sample(1:6, 60, replace = T, prob = c(1,1,2,1,1,1)))
(v<-sample(1:6, 6000, replace = T, prob = c(1,1,2,1,1,1)))
table(v)
(hh<-hist(v,breaks = 0:6))
(hh<-hist(v,breaks = seq(0,6, length.out = 14)))
(hh<-hist(v,breaks = seq(0,6, length.out = 28)))
(hh<-hist(v,breaks = seq(0,6, length.out = 50)))
(hh<-hist(v,breaks = 50))
(hh<-hist(v,breaks = 0:6))
hh$counts
hh$counts[3]
?plot
setwd("E:/PROY.CONACYT")
?expand.grid
